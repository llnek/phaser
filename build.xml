<project name="phaser" basedir="." default="devmode" xmlns:ivy="antlib:org.apache.ivy.ant">

  <property name="PID" value="${ant.project.name}"/>
  <property file="build.xs" />

  <ivy:settings file="${basedir}/ivy.config.xml"/>

  <path id="skarolibs.id">
    <fileset dir="${skaro.home}/lib"/>
  </path>

  <!-- paths used for compilation and run  -->
  <path id="compile.path.id">
    <path location="${out.jar.dir}" />
    <path location="${src.dir}/clojure" />
    <fileset dir="${lib.dir}" />
    <fileset dir="${skaro.home}/dist"/>
    <fileset dir="${skaro.home}/lib"/>
  </path>

  <path id="test.path.id">
    <path location="${out.test.dir}" />
    <path location="${test.dir}/clojure" />
    <path refid="compile.path.id" />
  </path>

  <taskdef name="scalac" classname="scala.tools.ant.Scalac" classpathref="skarolibs.id"/>
  <taskdef resource="net/sf/antcontrib/antlib.xml"/>

  <!-- resolve ivy stuff
       ================================= -->
  <target name="resolve">
    <ivy:retrieve pattern="${lib.dir}/[artifact]-[revision].[ext]"/>
  </target>

  <!-- target: build  (called by skaro)
       ================================= -->
  <target name="build" depends="clean,resolve,pre-build">
    <echo level="info" message="#############################################"/>
    <echo level="info" message="# building: ${ant.project.name}"/>
    <echo level="info" message="#############################################"/>
    <antcall target="compile-and-jar"/>
    <if> <equals arg1="${build.type}" arg2="web" />
      <then>
        <antcall target="build-webapps"/>
      </then>
    </if>
  </target>

  <target name="build-webapps">
    <for param="dir">
      <path>
        <dirset dir="${web.dir}">
          <include name="*"/>
        </dirset>
      </path>
      <sequential>
        <var name="wappid" value="" unset="true"/>
        <basename property="wappid" file="@{dir}"/>
        <antcall target="build-web-app"/>
      </sequential>
    </for>
  </target>

  <target name="build-web-app">
    <mkdir dir="${build.dir}/web_scripts/${wappid}"/>
    <mkdir dir="${build.dir}/web_styles/${wappid}"/>
    <switch value="${jslang}">
      <case value="clojurescript">
        <antcall target="compile-cljscript"/>
      </case>
      <case value="typescript">
        <antcall target="compile-typescript"/>
      </case>
      <case value="coffee">
        <antcall target="compile-coffee"/>
      </case>
      <case value="js">
      </case>
    </switch>
    <antcall target="compile-js"/>
    <switch value="${csslang}">
      <case value="less">
        <antcall target="compile-less"/>
      </case>
      <case value="scss">
        <antcall target="compile-scss"/>
      </case>
    </switch>
    <antcall target="compile-media"/>
    <antcall target="compile-pages"/>
  </target>

  <target name="finz-build">
    <!--
    <concat destfile="${basedir}/public/c/webcommon.js" append="true">
    </concat>
    -->
  </target>

  <!-- target: test-build
       ================================= -->
  <target name="test-build" depends="build">
    <antcall target="compile_test_code"/>
    <antcall target="run_test_code"/>
    <echo level="verbose" message="Test called - OK"/>
  </target>

  <!-- target: clean
       ================================= -->
  <target name="clean">
    <delete includeemptydirs="true">
      <fileset erroronmissingdir="false" dir="${out.jar.dir}" includes="**/*"/>
      <fileset erroronmissingdir="false" dir="${build.dir}" includes="**/*"/>
      <fileset erroronmissingdir="false" dir="${lib.dir}" includes="**/*.jar"/>
    </delete>
    <antcall target="clean-public"/>
  </target>

  <target name="clean-public">
    <delete includeemptydirs="true">
      <fileset erroronmissingdir="false" dir="${basedir}/public/scripts" includes="**/*"/>
      <fileset erroronmissingdir="false" dir="${basedir}/public/styles" includes="**/*"/>
      <fileset erroronmissingdir="false" dir="${basedir}/public/ig" includes="**/*"/>
    </delete>
    <mkdir dir="${basedir}/public/ig"/>
  </target>

  <!-- target: clean-cache
       ================================= -->
  <target name="clean-cache">
    <ivy:cleancache />
  </target>

  <!-- target: clean-local
       ================================= -->
  <target name="clean-local">
    <echo message="${ivy.lrepo.dir}"/>
  </target>

  <!-- target: report
       ================================= -->
  <target name="report" depends="resolve">
    <ivy:report todir="${build.dir}"/>
  </target>

  <target name="pre-build">
    <mkdir dir="${basedir}/POD-INF/classes" />
    <mkdir dir="${basedir}/POD-INF/lib" />
    <mkdir dir="${basedir}/POD-INF/patch" />
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dir}/web_scripts"/>
    <mkdir dir="${build.dir}/web_styles"/>
  </target>

  <!-- target: compile server-side source code ================================= -->

  <target name="compile-clj">
    <java classname="clojure.lang.Compile" fork="true" failonerror="true" 
      maxmemory="2048m" classpathref="compile.path.id">
      <sysproperty key="clojure.compile.warn-on-reflection" value="true"/>
      <sysproperty key="clojure.compile.path" value="${build.dir}" />
      <arg value="comzotohlabs.phaser.users.accounts"/>
      <arg value="comzotohlabs.phaser.site.core"/>
    </java>
    <copy todir="${out.jar.dir}">
      <fileset dir="${build.dir}">
      </fileset>
    </copy>
  </target>

  <target name="compile-and-jar">

    <javac sourcepath="" srcdir="${src.dir}/java" destdir="${out.jar.dir}"
      includeantruntime="false" excludes=""
      debug="${build.debug}" debuglevel="lines,vars,source" classpathref="compile.path.id">
      <compilerarg line="-Xlint:deprecation -Xlint:unchecked"/>
      <include name="**/*.java"/>
    </javac>

    <scalac srcdir="${src.dir}/scala" destdir="${out.jar.dir}"
      classpathref="compile.path.id"
      fork="false" jvmargs="-Xmx5120M -Xms1024M ">
      <include name="**/*.scala"/>
    </scalac>

    <antcall target="compile-clj"/>

    <!-- copy over other resources -->
    <copy todir="${out.jar.dir}">
      <fileset dir="${src.dir}/clojure">
        <exclude name="**/*.clj"/>
      </fileset>
      <fileset dir="${src.dir}/scala">
        <exclude name="**/*.scala"/>
      </fileset>
      <fileset dir="${src.dir}/java">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>

    <jar destfile="${lib.dir}/${PID}-${build.version}.jar" >
      <fileset dir="${out.jar.dir}"></fileset>
    </jar>

  </target>

  <!-- compile test code -->
  <target name="compile_test_code" >

    <mkdir dir="${out.test.dir}"/>
    <mkdir dir="${report.dir}"/>

    <scalac srcdir="${test.dir}/scala" destdir="${out.test.dir}" 
      classpathref="test.path.id" fork="false" jvmargs="-Xmx5120M -Xms1024M">
      <include name="**/*.scala"/>
    </scalac>

    <copy todir="${out.test.dir}">
      <fileset dir="${test.dir}/scala">
        <exclude name="**/*.scala"/>
      </fileset>
    </copy>

  </target>

  <!-- run test code -->
  <target name="run_test_code" >

    <taskdef name="scalatest" classname="org.scalatest.tools.ScalaTestAntTask">
      <classpath refid="test.path.id"/>
    </taskdef>

    <scalatest haltonfailure="true" fork="false" maxmemory="888M">
      <reporter type="stderr"/>
      <wildcard package="comzotohlabs.phaser"/>
      <runpath>
        <pathelement path="${out.test.dir}"/>
      </runpath>
    </scalatest>

  </target>

  <target name="compile-cljscript">
    <copy todir="${build.dir}/web_scripts/${wappid}">
      <fileset dir="${web.dir}/${wappid}/scripts"><include name="**/*.cljs"/></fileset>
    </copy>
    <java classname="clojure.main" fork="true" failonerror="true"
      maxmemory="2048m" classpathref="compile.path.id">
      <arg value="${basedir}/conf/cljsc.clj"/>
      <arg value="${web.dir}/${wappid}/scripts"/>
      <arg value="true"/>
      <!-- advanced none whitespace simple -->
      <arg value="none"/>
      <arg value="${build.dir}/web_scripts/${wappid}"/>
    </java>
  </target>

  <target name="compile-typescript">
    <copy todir="${build.dir}/web_scripts/${wappid}">
      <fileset dir="${web.dir}/${wappid}/scripts"><include name="**/*.ts"/></fileset>
    </copy>
    <exec executable="tsc" dir="${build.dir}/web_scripts/${wappid}">
      <arg value="--outDir"/> <arg value="--output"/> <arg value="${build.dir}/web_scripts/${wappid}"/>
      <arg value="**/*.ts"/>
    </exec>
  </target>

  <target name="compile-coffee">
    <mkdir dir="${build.dir}/web_scripts/${wappid}/game"/>
  </target>

  <target name="compile-xxcoffee">
    <copy todir="${build.dir}/web_scripts/${wappid}">
      <fileset dir="${web.dir}/${wappid}/scripts"><include name="**/*.coffee"/></fileset>
    </copy>
    <exec executable="coffee">
      <arg value="--bare"/> <arg value="--output"/> <arg value="${build.dir}/web_scripts/${wappid}"/>
      <arg value="--compile"/> <arg value="${build.dir}/web_scripts/${wappid}"/>
    </exec>
  </target>

  <target name="compile-js">
    <copy todir="${build.dir}/web_scripts/${wappid}">
      <fileset dir="${web.dir}/${wappid}/scripts">
        <include name="**/*.json"/>
        <include name="**/*.js"/>
      </fileset>
    </copy>
    <mkdir dir="${basedir}/public/ig/lib/game"/>
    <mkdir dir="${basedir}/public/scripts"/>
    <switch value="${wappid}">
      <case value="phaserio">
        <copy todir="${basedir}/public/ig/lib">
          <fileset dir="${build.dir}/web_scripts/${wappid}">
            <include name="**/*.json"/>
            <include name="**/*.js"/>
          </fileset>
        </copy>
      </case>
      <case value="main">
        <copy todir="${basedir}/public/scripts">
          <fileset dir="${build.dir}/web_scripts/${wappid}">
            <include name="**/*.json"/>
            <include name="**/*.js"/>
          </fileset>
        </copy>
      </case>
      <default>
        <copy todir="${basedir}/public/ig/lib/game/${wappid}">
          <fileset dir="${build.dir}/web_scripts/${wappid}/game">
            <include name="**/*.json"/>
            <include name="**/*.js"/>
          </fileset>
        </copy>
      </default>
    </switch>
    <if><equals arg1="${wappid}" arg2="phaserio" />
      <then> </then>
      <else> </else>
    </if>
  </target>

  <target name="compile-less">
    <copy todir="${build.dir}/web_styles/${wappid}">
      <fileset dir="${web.dir}/${wappid}/styles"><include name="**/*.less"/></fileset>
    </copy>
    <apply executable="lessc" parallel="false">
      <fileset dir="${build.dir}/web_styles/${wappid}">
        <include name="**/*.less"/>
      </fileset>
      <srcfile/>
      <chainedmapper>
        <mapper type="glob" from="*.less" to="*.css"/>
        <globmapper from="*" to="${build.dir}/web_styles/${wappid}/*"/>
      </chainedmapper>
      <targetfile/>
    </apply>
    <copy todir="${build.dir}/web_styles/${wappid}">
      <fileset dir="${web.dir}/${wappid}/styles"><include name="**/*.css"/></fileset>
    </copy>
    <mkdir dir="${basedir}/public/styles/${wappid}"/>
    <copy todir="${basedir}/public/styles/${wappid}">
      <fileset dir="${build.dir}/web_styles/${wappid}"><include name="**/*.css"/></fileset>
    </copy>
  </target>

  <target name="compile-scss">
    <copy todir="${build.dir}/web_styles/${wappid}">
      <fileset dir="${web.dir}/${wappid}/styles"><include name="**/*.scss"/></fileset>
    </copy>
    <apply executable="sass" parallel="false">
      <fileset dir="${build.dir}/web_styles/${wappid}">
        <include name="**/*.scss"/>
      </fileset>
      <srcfile/>
      <chainedmapper>
        <mapper type="glob" from="*.scss" to="*.css"/>
        <globmapper from="*" to="${build.dir}/web_styles/${wappid}/*"/>
      </chainedmapper>
      <targetfile/>
    </apply>
    <copy todir="${build.dir}/web_styles/${wappid}">
      <fileset dir="${web.dir}/${wappid}/styles"><include name="**/*.css"/></fileset>
    </copy>
    <mkdir dir="${basedir}/public/styles/${wappid}"/>
    <copy todir="${basedir}/public/styles/${wappid}">
      <fileset dir="${build.dir}/web_styles/${wappid}"><include name="**/*.css"/></fileset>
    </copy>
  </target>

  <target name="compile-media">
    <mkdir dir="${basedir}/public/ig/media/${wappid}"/>
    <copy todir="${basedir}/public/ig/media/${wappid}">
      <fileset dir="${web.dir}/${wappid}/media"><include name="**/*"/></fileset>
    </copy>
  </target>

  <target name="compile-pages">
    <mkdir dir="${basedir}/public/pages/${wappid}"/>
    <copy todir="${basedir}/public/pages/${wappid}">
      <fileset dir="${web.dir}/${wappid}/pages"><include name="**/*"/></fileset>
    </copy>
  </target>

  <target name="yui-css">
    <apply executable="java" parallel="false">
      <fileset dir="${basedir}/public/styles">
        <exclude name="**/*.min.css"/>
        <include name="**/*.css"/>
      </fileset>
      <arg line="-jar" />
      <arg path="${skaro.home}/lib/yuicompressor-2.4.7.jar" />
      <srcfile/>
      <arg line="-o"/>
      <chainedmapper>
        <mapper type="glob" from="*.css" to="*.min.css"/>
        <globmapper from="*" to="${basedir}/public/styles/*"/>
      </chainedmapper>
      <targetfile/>
    </apply>
  </target>

  <target name="yui-js">
    <apply executable="java" parallel="false">
      <fileset dir="${basedir}/public/scripts">
        <exclude name="**/*.min.js"/>
        <include name="**/*.js"/>
      </fileset>
      <arg line="-jar" />
      <arg path="${skaro.home}/lib/yuicompressor-2.4.7.jar" />
      <srcfile/>
      <arg line="-o"/>
      <chainedmapper>
        <mapper type="glob" from="*.js" to="*.min.js"/>
        <globmapper from="*" to="${basedir}/public/scripts/*"/>
      </chainedmapper>
      <targetfile/>
    </apply>
  </target>


  <!--
       public TARGETS
       -->

  <target name="release" depends="build">
    <antcall target="yui-css"/>
    <antcall target="yui-js"/>
    <antcall target="finz-build"/>
  </target>

  <target name="devmode" depends="build">
    <antcall target="finz-build"/>
  </target>

  <target name="test" depends="test-build">
  </target>

</project>




